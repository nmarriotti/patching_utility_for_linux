#!/bin/bash
############################
# Patch Utility
# Author: Nick Marriotti
# Date: 2/12/2021
############################

SCRIPTROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PATCHED_FILES_DIR="$SCRIPTROOT/files"
MANIFEST_CONFIG="$SCRIPTROOT/manifest.cfg"
MANIFEST="$SCRIPTROOT/manifest"
PATCH_DIR="$SCRIPTROOT/patches"
BACKUP_DIR="$SCRIPTROOT/backup"

# Writes data to the manifest file
WriteManifestLine() {
	# Requires the absolute path of file to patch as an argument
	dest=$1
	
	# Calculate hash
    md5=`md5sum $dest | cut -d ' ' -f 1`
	
	# Copy entire directory structure and file to ./files/
	cp --parents -r $dest $PATCHED_FILES_DIR/
	
	# Do not include $PATCHED_FILES_DIR path
	# to allow user to patch from any folder
	src=$dest

	# Get file attributes
	owner=`stat -c %U $dest`
	group=`stat -c %G $dest`
	perms=`stat -c %a $dest`

	# Check if MD5 is empty
	if [ -z $md5 ]; then
		md5="-"	# unable to hash directories
	fi
	touch $MANIFEST > /dev/null
	
	# Will be written to manifest
	line="$md5,$src,$dest,$owner,$group,$perms"

	# Check if data is already in manifest
	if [ -f "$dest" ]; then
		if ! grep -q "$dest" "$MANIFEST"
	 	then
			# this file is not in the manifest, add it
			echo "adding $dest to manifest"
			echo $line >> $MANIFEST
		fi
	else
		echo "adding $dest to manifest"
		echo $line >> $MANIFEST
	fi
}


# Processes manifest.cfg and recursively locates files
# to include in the manifest file
Build() {
	echo "Building manifest..."

	# Remove any pre-existing backups
	rm -rf $BACKUP_DIR 2> /dev/null
	
	# Will store patched files
	mkdir -p $PATCHED_FILES_DIR 2> /dev/null

	# Count of files included in this patch
	num_files=0
	
	# Cleanup 
	rm -f $MANIFEST &> /dev/null
	rm -rf $PATCHED_FILES_DIR/*
	
    # Iterate over each line of manifest.cfg
    while read -r dest
	do
		if [ -d $dest ]; then
			# Adding an entire directory
			echo "scanning $dest"

			# find all subfolders
			for d in $(find $dest -type d); do
				# Write this directory to manifest
				WriteManifestLine $d
				
				# Find all files in each subfolder			
				for f in $(find $d -type f); do
					# Write this file to manifest
					WriteManifestLine $f
					((num_files++))
				done
			done
		else
			# Adding a single file
			WriteManifestLine $dest
			((num_files++))
		fi
	done < $MANIFEST_CONFIG

	echo "added $num_files file(s)."
	echo ""
	echo "build complete."
}


ApplyPatches() {
	echo "checking files..."
	if [ ! -f $MANIFEST ]; then
		echo "ERROR: Manifest not found"
		exit 1
	fi
	
	num_patched=0
	mkdir $PATCH_DIR	
	
	# Read each line in manifest
    while read -r line
	do
		# Parse line from manifest
		IFS=',' read -r -a array <<< $line
        
		md5=${array[0]}
		src=$PATCHED_FILES_DIR${array[1]}
		dest=${array[2]}
		owner=${array[3]}
		group=${array[4]}
		perms=${array[5]}

		# Check if this is a directory
		if [ -d $dest ]; then
			mkdir -p $dest	
		elif [ -f $dest ]; then						
			diff -u $dest $src > /dev/null						# check file diff
			if [ $? -eq 1 ]; then								# return code 1 means patch is required
				Backup $dest									# create a backup of this file
				diff -u $dest $src > "$PATCH_DIR/file.patch"	# create patch file
				patch -u $dest -i "$PATCH_DIR/file.patch"		# patch the file
				((num_patched++))								# increment counter
				rm -f $PATCH_DIR/file.patch						# Remove patch after it's applied
			fi
		else
			# File is missing from filesystem, replace it
			mkdir -p `dirname $dest` 							# Create destination directories
			echo "installing $dest"
			cp -fp $src $dest	 								# Copy file from patch to filesystem
			((num_patched++))
		fi

		# set dir/file permissions
		chown $owner:$group $dest 2> /dev/null
		chmod $perms $dest 2> /dev/null
	done < $MANIFEST

	# Remove patch directory when finished patching
	rm -rf $PATCH_DIR
	
	if [[ $num_patched -eq 0 ]]; then
		echo "no action taken. all files are intact" 
	else
		echo "$num_patched files patched."
		echo -e "\nrevert changes with './patch restore'"
	fi
}

# Copies the original file to the backup directory
Backup() {
	file=$1
	mkdir $BACKUP_DIR 2> /dev/null
	echo "creating backup of $file"	 
	cp --parents -r $file $BACKUP_DIR
}

# Replaces file with the backed up copy
Restore() {
	echo "restoring..."
	num_restored=0
	while read -r line
	do
		IFS=',' read -r -a array <<< $line
        md5=${array[0]}
		src=${array[1]}
		dest=${array[2]}
		owner=${array[3]}
		group=${array[4]}
		perms=${array[5]}

		# This is the backup file
		restoreFile=$BACKUP_DIR$dest

		if [ -f $restoreFile ]; then
			# Check if a restore is necessary
        		backup_md5=`md5sum $restoreFile | cut -d ' ' -f 1`
			if [ ! $backup_md5 == `md5sum $dest | cut -d ' ' -f 1` ]; then
				echo "restoring $dest"
				cp -f $restoreFile $dest
				((num_restored++))
			fi
		fi

	done < $MANIFEST
	if [ $num_restored -gt 0 ]; then
		echo -e "complete\n$num_restored file(s) restored."
	else
		echo "no action taken. restore was not required"
	fi
}


# Script starts here
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
	echo "Must be root"
	exit 1
fi

if [ $# == 1 ]; then
	if [ `echo $1` == 'build' ]; then
		Build
	elif [ `echo $1` == 'restore' ]; then
		while true; do
    			read -p "Do you wish to undo all changes that were applied by the patch? " yn
    			case $yn in
        			[Yy]* ) Restore; break;;
        			[Nn]* ) exit;;
        			* ) echo "Please answer yes or no.";;
    			esac
		done
	fi
else
	while true; do
    		read -p "Do you wish to run this patch? " yn
    		case $yn in
        		[Yy]* ) ApplyPatches; break;;
        		[Nn]* ) exit;;
        		* ) echo "Please answer yes or no.";;
    		esac
	done
fi
